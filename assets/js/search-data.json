{
  
    
        "post0": {
            "title": "Training Neural Networks, How do neural networks learn from input data",
            "content": "from fastai.vision.all import * . We often hear deep learning is used to create many great tools in modern technology. . . But what makes it so special is it&#39;s ability to create function from data, you just need to tell what your input is in a language your neural network can understand and perform some math on it and return the output in a way you wanted it to present. . So how does it actually create the function from the input we provide? . Let us try to understand the building blocks of neural networks by designing one to create a small function. . def f(x): return (3*x)**2 + (2*x) + 1 . Let us assume we want our neural network to create the above function. . For that we need bunch of input data so that on performing some simple math on the input few time it should be able to create a function that will be as close to the above function as possible . So let us create some random input data for our neural network . input = torch.randn(20,1) input . tensor([[-1.4960], [ 1.0505], [-1.2208], [-0.1043], [-0.6975], [-1.0210], [-1.4829], [ 1.6385], [-0.0320], [ 1.7046], [-0.9550], [-0.7537], [-1.3309], [ 0.0092], [-0.8687], [ 1.0112], [ 0.2605], [ 0.0019], [ 0.1865], [ 1.2590]]) . There are few ways the neural networks try to create a function called supervise learning, unsupervised learning etc. . We will try to create our function with supervised learning techinque. . Incase of supervised learning technique we should also have the corresponding output data for your inputs so that we can tell if your neural network is going in right direction for creating your function. . We can get the outputs to our input data by passing our inputs through our function. . output = f(input) output . tensor([[18.1501], [13.0326], [11.9709], [ 0.8893], [ 3.9833], [ 8.3397], [17.8241], [28.4376], [ 0.9452], [30.5601], [ 7.2989], [ 4.6051], [14.2805], [ 1.0192], [ 6.0538], [12.2250], [ 2.1318], [ 1.0038], [ 1.6861], [17.7848]]) . Let us plot our function on a graph for vizualization . plt.scatter(input,output,color=&#39;blue&#39;) . &lt;matplotlib.collections.PathCollection at 0x7f181657b760&gt; . Now we need to create a neural network that can create a function that looks similar to the above graph. . This is can be done by repeating 3 steps for few times. . Make a prediction by performing multiplication and addition. | Check how bad the prediction is from the output. | Change some values accordingly so that your prediction gets better. | Let us go through these steps one by one. . Forward Propagation . We start with create a random function by multiplying your input by a parameter called weights and adding it to a parameter called bias. This process of predicting a function is called forward propagation. . We start with random values for these weights and bias and our goal is to adjust these parameters so that we can create a function that is similar to the one we wanted to create. . def param_init(size): return torch.randn(size) . weights = param_init(1) bias = param_init(1) weights.shape, bias.shape . (torch.Size([1]), torch.Size([1])) . The number of weights and bias to use depends on your input and output dimensions and your network architecture . We make a prediction by multiplying our input with the weight and adding it to bias . pred = input@weights + bias pred . tensor([-1.1997, 0.6034, -1.0048, -0.2143, -0.6343, -0.8633, -1.1904, 1.0197, -0.1631, 1.0665, -0.8167, -0.6741, -1.0828, -0.1339, -0.7555, 0.5756, 0.0440, -0.1391, -0.0084, 0.7510]) . &quot;@&quot; symbol represents matrix multiplication between our input and weights This is referred as single layer neural network . pred,output . (tensor([-1.1997, 0.6034, -1.0048, -0.2143, -0.6343, -0.8633, -1.1904, 1.0197, -0.1631, 1.0665, -0.8167, -0.6741, -1.0828, -0.1339, -0.7555, 0.5756, 0.0440, -0.1391, -0.0084, 0.7510]), tensor([[18.1501], [13.0326], [11.9709], [ 0.8893], [ 3.9833], [ 8.3397], [17.8241], [28.4376], [ 0.9452], [30.5601], [ 7.2989], [ 4.6051], [14.2805], [ 1.0192], [ 6.0538], [12.2250], [ 2.1318], [ 1.0038], [ 1.6861], [17.7848]])) . These are our prediction and actual output for our input. . Now we need a method that tells us how bad our prediction is from our actual output and helps the neural network to make changes so that our predictions become much better. . This method is called loss function and this varies depending on what function you want your neural network to create. For our function we need a loss function that tells us how far our predicted output is from the real out. . There is a function that helps us to achieve this called mean squared error. . def mse(pred,target): return ((pred-target)**2).mean().sqrt() . mse(pred,output) . tensor(13.5815) . Now we need to reduce this loss as much as possible so that our predictions will be as close to our real outputs, there by resulting in a function close to the one we wanted to create. . Back propagation . We can reduce our loss with the help of calculus. . Since we got the loss from the prediction by multiplying our input to weights and adding them with bias, by calculating gradient of the loss with respect to particular parameter we get how much change we need to make to the parameter so that the loss will be reduced. . This process of calculating the gradients and updating the parameters is called back propagation and the process of reducing the loss by subtracting the gradients from their parameters is called gradient descent. . Using these new adjusted parameters we do a forward propagation and calculate the loss and do a back propagation again is performed till you are satisfied. . Pytorch is a machine learning library will help us to calculate these gradients easily. For that we need to modify our init_params function. . def param_init(size): return torch.randn(size).requires_grad_() . weights = param_init(1) bias = param_init(1) . pred = input@weights + bias pred . tensor([1.5560, 3.2335, 1.7373, 2.4727, 2.0820, 1.8689, 1.5646, 3.6208, 2.5204, 3.6644, 1.9123, 2.0450, 1.6647, 2.5475, 1.9692, 3.2076, 2.7131, 2.5427, 2.6643, 3.3708], grad_fn=&lt;AddBackward0&gt;) . loss = mse(pred,output) loss . tensor(11.6596, grad_fn=&lt;SqrtBackward&gt;) . We can caluculate the gradient of each parameter by calling backward on the loss . loss.backward() . print(weights.data) . tensor([0.6587]) . weights.data -= weights.grad.data * 0.01 weights.data . tensor([0.6572]) . bias.data -= bias.grad.data * 0.01 bias . tensor([2.5480], requires_grad=True) . We subtract the gradient from its parameter so that it results in reducing loss and 0.01 we multipled is referred as learning rate that indicates how fast we want to reduce it . pred = input@weights + bias pred . tensor([1.5648, 3.2384, 1.7457, 2.4794, 2.0896, 1.8770, 1.5734, 3.6249, 2.5270, 3.6683, 1.9203, 2.0527, 1.6733, 2.5541, 1.9771, 3.2126, 2.7192, 2.5493, 2.6706, 3.3755], grad_fn=&lt;AddBackward0&gt;) . loss = mse(pred,output) loss . tensor(11.6551, grad_fn=&lt;SqrtBackward&gt;) . By subtracting the gradient from our parameters and predicting again using new parameters we have seen that the loss is bit reduced. We need to perform this operation few times so that we can obtain a function that is close to one we wanted to create. . Putting it all together . weights = param_init(1) bias = param_init(1) . def model(input): return input@weights + bias . for i in range(100): preds = model(input) loss = mse(preds,output) loss.backward() weights.data = (weights.data - weights.grad.data)*0.1 bias.data = (bias.data - bias.grad.data)*0.1 weights.grad = None bias.grad = None if i % 10 == 0: print(f&#39;loss at {i} epoch is {loss.item()}&#39;) . loss at 0 epoch is 13.53933334350586 loss at 10 epoch is 13.315178871154785 loss at 20 epoch is 13.315178871154785 loss at 30 epoch is 13.315178871154785 loss at 40 epoch is 13.315178871154785 loss at 50 epoch is 13.315178871154785 loss at 60 epoch is 13.315178871154785 loss at 70 epoch is 13.315178871154785 loss at 80 epoch is 13.315178871154785 loss at 90 epoch is 13.315178871154785 . preds = model(input) plt.scatter(input,output,color=&#39;blue&#39;) plt.scatter(input,to_np(preds),color=&#39;red&#39;) . &lt;matplotlib.collections.PathCollection at 0x7f1813c11c40&gt; . The function created by our neural network is not close to the one we wanted it to create. . We can add more layers to our neural network so that it can create more complex functions . weights1 = param_init((1,3)) bias1 = param_init(1) weights2 = param_init((3,1)) bias2 = param_init(1) . def model(x): res = x@weights1 + bias1 res = res.max(tensor(0.0)) res = res@weights2 + bias2 return res . In order to add more layers in our neural networks we need to add non linearity between each layer because without non linearity adding any number of layers result in a single layer with different values . res.max(tensor(0.0)) . This is called as relu activation (rectified linear unit). This return the value of the input if it is great than 0 else it return 0 . There are also other activation function. These help us to add any number of layers to our neural network . We will try to create a function using new neural network . for i in range(100): preds = model(input) loss = mse(preds,output) loss.backward() weights1.data -= weights1.grad.data*0.1 bias1.data -= bias1.grad.data*0.1 weights2.data -= weights2.grad.data*0.1 bias2.data -= bias2.grad.data*0.1 weights1.grad = None bias1.grad = None weights2.grad = None bias2.grad = None if i % 10 == 0: print(f&#39;loss at {i} epoch is {loss.item()}&#39;) . loss at 0 epoch is 12.595451354980469 loss at 10 epoch is 8.591468811035156 loss at 20 epoch is 4.076166152954102 loss at 30 epoch is 2.424997091293335 loss at 40 epoch is 2.0419137477874756 loss at 50 epoch is 1.7463204860687256 loss at 60 epoch is 1.5143097639083862 loss at 70 epoch is 1.2655751705169678 loss at 80 epoch is 1.5919958353042603 loss at 90 epoch is 1.6115561723709106 . preds = model(input) . plt.scatter(input,output,color=&#39;blue&#39;) plt.scatter(input,to_np(preds),color=&#39;red&#39;) . &lt;matplotlib.collections.PathCollection at 0x7f1812df5970&gt; . We could see that the neural network is able to create a function that is close to the original function. . This way we are able to create many complex functions using deep learning there by bringing major breakthroughs in fields computer vision,Natural language processing etc where tradition programming has many limitans in creating effective functions. . Many advancements in the field brought us techniques that make the training of these neural networks faster and better. . If you are interested to learn more about deep learning i would suggest you to take https://www.fast.ai/ course. . You can also watch https://www.youtube.com/c/3blue1brown/playlists, Where the math and working of a neural network is explained in great detail. .",
            "url": "https://adityavarmauddaraju.github.io/ai_blogs/2021/06/07/blog-1.html",
            "relUrl": "/2021/06/07/blog-1.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://adityavarmauddaraju.github.io/ai_blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://adityavarmauddaraju.github.io/ai_blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://adityavarmauddaraju.github.io/ai_blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://adityavarmauddaraju.github.io/ai_blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}